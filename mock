#!/bin/bash

if [ $# -lt 1 ]; then
    >&2 echo "You need to provide command to mock!"
    exit 1
fi

command=$1
shift
args=$@

if [ ! -d "mocks" ]; then
    mkdir mocks
fi

stdout=$(${command} ${args} 2> mocks/stderr_tmp)
exitcode=$?
stderr=$(cat mocks/stderr_tmp)
rm mocks/stderr_tmp

echo "stdout: $stdout"
echo "stderr: $stderr"
echo "exit code: $exitcode"

funame=p_$(echo -n "${args}" | md5sum | cut -d" " -f1)

# Create ending part of file with function call
if [ ! -e mocks/${command} ]; then
    cat << EOF > mocks/${command}


funame=p_\$(echo -n "\$@" | md5sum | cut -d" " -f1)
\$funame
EOF
fi

mv mocks/${command} mocks/${command}_tmp

echos=""
if [ -n "${stdout}" ]; then
    echos+="
    echo \"${stdout}\""
fi
if [ -n "${stderr}" ]; then
    echos+="
    >&2 echo \"${stderr}\""
fi

# Create new function for current args
cat << EOF > mocks/${command}
#!/bin/bash

# For param: ${args}
function ${funame} {${echos}
    exit ${exitcode}
}
EOF

# Add old file below new function (but ommit first line, as that should be shebang)
tail --lines=+2 mocks/${command}_tmp >> mocks/${command}
rm mocks/${command}_tmp

chmod +x mocks/${command}
